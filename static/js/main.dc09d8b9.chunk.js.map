{"version":3,"sources":["App.js","DataProvider.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","origin","flight","arrival","columns","Header","accessor","eventSource","EventSource","_this2","onmessage","e","updateFlightState","JSON","parse","flightState","newData","map","item","setState","assign","react_default","a","createElement","className","es","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAwDeA,cAlDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KCRG,CAAC,CACNC,OAAQ,SACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,IACN,CACDE,OAAQ,SACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,IACN,CACDE,OAAQ,WACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,IACN,CACDE,OAAQ,eACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,IACN,CACDE,OAAQ,OACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,IACN,CACDE,OAAQ,QACRC,OAAQ,OACRC,QAAS,QACTJ,MAAO,MDlBPP,EAAKY,QAAU,CAAC,CACdC,OAAQ,SACRC,SAAU,UACT,CACDD,OAAQ,SACRC,SAAU,UACT,CACDD,OAAQ,UACRC,SAAU,WACT,CACDD,OAAQ,QACRC,SAAU,UAGZd,EAAKe,YAAc,IAAIC,YAAY,gCApBlBhB,mFAwBC,IAAAiB,EAAAd,KAChBA,KAAKY,YAAYG,UAAY,SAACC,GAAD,OAAOF,EAAKG,kBAAkBC,KAAKC,MAAMH,EAAEX,kDAGxDe,GAChB,IAAIC,EAAUrB,KAAKI,MAAMC,KAAKiB,IAAI,SAACC,GAIjC,OAHIA,EAAKhB,SAAWa,EAAYb,SAC9BgB,EAAKnB,MAAQgB,EAAYhB,OAEpBmB,IAGTvB,KAAKwB,SAAS1B,OAAO2B,OAAO,GAAI,CAACpB,KAAMgB,sCAGzC,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEzB,KAAML,KAAKI,MAAMC,KACjBI,QAAST,KAAKS,kBA5CNsB,aEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc09d8b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport { getInitialFlightData } from './DataProvider';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: getInitialFlightData()\n    };\n\n    this.columns = [{\n      Header: 'Origin',\n      accessor: 'origin'\n    }, {\n      Header: 'Flight',\n      accessor: 'flight'\n    }, {\n      Header: 'Arrival',\n      accessor: 'arrival'\n    }, {\n      Header: 'State',\n      accessor: 'state'\n    }];\n\n    this.eventSource = new EventSource('http://localhost:5000/events');\n    \n  }\n\n  componentDidMount() {\n      this.eventSource.onmessage = (e) => this.updateFlightState(JSON.parse(e.data));\n    }\n\n    updateFlightState(flightState) {\n      let newData = this.state.data.map((item) => {\n        if (item.flight === flightState.flight) {\n          item.state = flightState.state;\n        }\n        return item;\n      });\n\n      this.setState(Object.assign({}, {data: newData}));\n    }\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactTable\n          data={this.state.data}\n          columns={this.columns}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function getInitialFlightData() {\n  return [{\n    origin: 'London',\n    flight: 'A123',\n    arrival: '08:15',\n    state: ''\n  }, {\n    origin: 'Berlin',\n    flight: 'D654',\n    arrival: '08:45',\n    state: ''\n  }, {\n    origin: 'New York',\n    flight: 'U213',\n    arrival: '09:05',\n    state: ''\n  }, {\n    origin: 'Buenos Aires',\n    flight: 'A987',\n    arrival: '09:30',\n    state: ''\n  }, {\n    origin: 'Rome',\n    flight: 'I768',\n    arrival: '10:10',\n    state: ''\n  }, {\n    origin: 'Tokyo',\n    flight: 'G119',\n    arrival: '10:35',\n    state: ''\n  }];\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}